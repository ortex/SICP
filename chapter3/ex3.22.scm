(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "front call with empty queue")
          (car front-ptr)))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (delete!)
      (if (empty?)
          (error "delete! call with empty queue")
          (set! front-ptr (cdr front-ptr))))

    (define (dispatch m)
      (cond ((eq? m 'empty?) empty?)
            ((eq? m 'front) front)
            ((eq? m 'insert!) insert!)
            ((eq? m 'delete!) delete!)
            ((eq? m 'print) (lambda () front-ptr))
            (else (error "Unknown operation" m))))
    dispatch))

(define q (make-queue))

((q 'empty?))

((q 'insert!) 15)
((q 'print)) ; (15)

((q 'insert!) 1)
((q 'insert!) 2)
((q 'insert!) 3)
((q 'print)) ; (15 1 2 3)

((q 'delete!))
((q 'print)) ; (1 2 3)
